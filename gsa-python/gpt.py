from blosum62 import blosum62

#!! GENERATED BY AI !!#
#
#
#
#

## This is the first output that it was given,


# def align_protein_sequences(seq1, seq2, blosum62):
#     m = len(seq1)
#     n = len(seq2)

#     # Create a matrix of size (m + 1) x (n + 1) to store the scores
#     scores = [[0 for j in range(n + 1)] for i in range(m + 1)]

#     # Initialize the first row and column with 0
#     for i in range(1, m + 1):
#         scores[i][0] = 0

#     for j in range(1, n + 1):
#         scores[0][j] = 0

#     # Calculate the scores for each pair of amino acids
#     for i in range(1, m + 1):
#         for j in range(1, n + 1):
#             amino_acid1 = seq1[i - 1]
#             amino_acid2 = seq2[j - 1]
#             score = blosum62[amino_acid1 + amino_acid2]

#             # Find the maximum score from the three possible alignment scenarios
#             scores[i][j] = max(
#                 scores[i - 1][j] + blosum62["A" + amino_acid1],
#                 scores[i][j - 1] + blosum62["A" + amino_acid2],
#                 scores[i - 1][j - 1] + score,
#             )

#     # Traceback to find the optimal alignment
#     align1 = ""
#     align2 = ""

#     i = m
#     j = n
#     while i > 0 and j > 0:
#         if scores[i][j] == scores[i - 1][j - 1] + blosum62[seq1[i - 1] + seq2[j - 1]]:
#             align1 = seq1[i - 1] + align1
#             align2 = seq2[j - 1] + align2
#             i -= 1
#             j -= 1
#         elif scores[i][j] == scores[i - 1][j] + blosum62["A" + seq1[i - 1]]:
#             align1 = seq1[i - 1] + align1
#             align2 = "-" + align2
#             i -= 1
#         elif scores[i][j] == scores[i][j - 1] + blosum62["A" + seq2[j - 1]]:
#             align1 = "-" + align1
#             align2 = seq2[j - 1] + align2
#             j -= 1

#     # If there are remaining characters in the first sequence, add gaps to the second sequence
#     while i > 0:
#         align1 = seq1[i - 1] + align1
#         align2 = "-" + align2
#         i -= 1

#     # If there are remaining characters in the second sequence, add gaps to the first sequence
#     while j > 0:
#         align1 = "-" + align1
#         align2 = seq2[j - 1] + align2
#         j -= 1

#     return align1, align2

## Then, I asked it to include gap extensions into the program and it gave me this
def align_protein_sequences(seq1, seq2, blosum62, gap_penalty, gap_extension_penalty):
    # Create a matrix to store the alignment scores
    m = len(seq1) + 1
    n = len(seq2) + 1
    scores = [[0] * n for _ in range(m)]

    # Initialize the first row and column of the matrix
    for i in range(m):
        scores[i][0] = i * gap_penalty
    for j in range(n):
        scores[0][j] = j * gap_penalty

    # Fill in the rest of the matrix
    for i in range(1, m):
        for j in range(1, n):
            # Calculate the score for each possible alignment
            match = scores[i - 1][j - 1] + blosum62[seq1[i - 1] + seq2[j - 1]]
            delete = scores[i - 1][j] + gap_penalty
            insert = scores[i][j - 1] + gap_penalty
            extend = scores[i - 1][j - 1] + gap_extension_penalty

            # Choose the best alignment
            scores[i][j] = max(match, delete, insert, extend)

    # Trace back to find the optimal alignment
    align1 = ""
    align2 = ""
    i = m - 1
    j = n - 1
    while i > 0 and j > 0:
        score = scores[i][j]
        score_diag = scores[i - 1][j - 1]
        score_up = scores[i][j - 1]
        score_left = scores[i - 1][j]

        # Check which cell the score was calculated from
        if score == score_diag + blosum62[seq1[i - 1] + seq2[j - 1]]:
            align1 += seq1[i - 1]
            align2 += seq2[j - 1]
            i -= 1
            j -= 1
        elif score == score_left + gap_penalty:
            align1 += seq1[i - 1]
            align2 += "-"
            i -= 1
        elif score == score_up + gap_penalty:
            align1 += "-"
            align2 += seq2[j - 1]
            j -= 1
        elif score == score_diag + gap_extension_penalty:
            align1 += seq1[i - 1]
            align2 += seq2[j - 1]
            i -= 1
            j -= 1

    # Add remaining sequence (if any)
    while i > 0:
        align1 += seq1[i - 1]
        align2 += "-"
        i -= 1
    while j > 0:
        align1 += "-"
        align2 += seq2[j - 1]
        j -= 1

    # Reverse the alignments, since they were built in reverse
    return align1[::-1], align2[::-1]


# had to promt for this function
def alignment_score(align1, align2, blosum62):
    score = 0

    for i in range(len(align1)):
        amino_acid1 = align1[i]
        amino_acid2 = align2[i]

        # If there is a gap, use the gap penalty
        if amino_acid1 == "-" or amino_acid2 == "-":
            score += blosum62["A*"]
        else:
            score += blosum62[amino_acid1 + amino_acid2]

    return score


# had to promt a few times for this, does not quite work right
def print_alignment(align1, align2):
    # Find the length of the longest sequence
    max_len = max(len(align1), len(align2))

    # Print each amino acid in a separate line
    counter = 0
    for i in range(max_len):
        if i < len(align1):
            print(align1[i], end="")
            counter += 1
            if counter == 50:
                print()
                counter = 0
        else:
            print("-", end="")
            counter += 1
            if counter == 50:
                print()
                counter = 0

        print()

        if i < len(align2):
            print(align2[i], end="")
            counter += 1
            if counter == 50:
                print()
                counter = 0
        else:
            print("-", end="")
            counter += 1
            if counter == 50:
                print()
                counter = 0

        print()


# Define the protein sequences
# seq1 = "ARND"
# seq2 = "RNDW"
## END GENERATED BY AI

## GENERATED BY HUMAN
seq1 = "MTIPHMKYAVSKTSENKVSNTVSPTQDKDAIRKQPDDIINNDEPSHKKIKVAQPDSLRETNTTDPLGHTKAALGEVASMELKPTNDMDPLAVSAASVVSMSNDVLKPETPKGPIIISKNPSNGIFYGPSFTKRESLNARMFLKYYGAHKFLDTYLPEDLNSLYIYYLIKLLGFEVKDQALIGTINSIVHINSQERVQDLGSAISVTNVEDPLAKKQTVRLIKDLQRAINKVLCTRLRLSNFFTIDHFIQKLHTARKILVLTGAGVSTSLGIPDFRSSEGFYSKIKHLGLDDPQDVFNYNIFMHDPSVFYNIANMVLPPEKIYSPLHSFIKMLQMKGKLLRNYTQNIDNLESYAGISTDKLVQCHGSFATATCVTCHWNLPGERIFNKIRNLELPLCPYCYKKRREYFPEGYNNKVGVAASQGSMSERPPYILNSYGVLKPDITFFGEALPNKFHKSIREDILECDLLICIGTSLKVAPVSEIVNMVPSHVPQVLINRDPVKHAEFDLSLLGYCDDIAAMVAQKCGWTIPHKKWNDLKNKNFKCQEKDKGVYVVTSDEHPKTL*"
seq2 = "MKQKFVLPITPPSTAEKKPQTENRCNENLKPRRLLPQLKKSVRNRKPRLSYRPELNSVFDLDAYVDSTHLSKSQRHHMDRDAGFISYALNYSKRMVVVSGAGISVAAGIPDFRSSEGIFSTVNGGSGKDLFDYNRVYGDESMSLKFNQLMVSLFRLSKNCQPTKFHEMLNEFARDGRLLRLYTQNIDGLDTQLPHLSTNVPLAKPIPSTVQLHGSIKHMECNKCLNIKPFDPELFKCDDKFDSRTEIIPSCPQCEEYETVRKMAGLRSTGVGKLRPRVILYNEVHPEGDFIGEIANNDLKKRIDCLIIVGTSLKIPGVKNICRQFAAKVHANRGIVLYLNTSMPPKNVLDSLKFVDLVVLGDCQHVTSLL*"


def print_alignment(seq1, seq2):
    # grab constants for list manip
    length = len(seq1)
    beginning = 0
    end = 50

    # num base pairs iterated over for each strand
    char1 = 1
    char2 = 1

    # print 50 lines of each seq at a time
    while True:
        # create temp lists
        tmp1 = seq1[beginning : min(length, end)]
        tmp2 = seq2[beginning : min(length, end)]

        # compose lines
        line1 = ""
        line2 = ""
        line3 = ""

        for i in range(len(tmp1)):
            line1 += tmp1[i]
            line2 += tmp2[i]
            # check for exact matches
            if tmp1[i] == tmp2[i]:
                line3 += "*"
            else:
                line3 += " "
            # only add char if not a gap
            if tmp1[i] != "-":
                char1 += 1

            if tmp2[i] != "-":
                char2 += 1

        # add traversed chars after each sequence line
        line1 += f" |{char1}"
        line2 += f" |{char2}"
        print(line1)
        print(line2)
        print(line3)
        # increase list indexes
        beginning += 50
        end += 50
        if beginning > length:
            break


## END GENERATED BY HUMAN

# Define the gap penalty and gap extension penalty
gap_penalty = -12
gap_extension_penalty = -2

# Align the sequences using BLOSUM62
align1, align2 = align_protein_sequences(
    seq1, seq2, blosum62, gap_penalty, gap_extension_penalty
)

# Calculate the alignment score
score = alignment_score(align1, align2, blosum62)

# Print the alignment (THIS IS A HUMAN GENERATED FUNCTION)
print_alignment(align1, align2)

print("Score:", score)
