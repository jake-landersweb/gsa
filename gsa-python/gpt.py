from blosum62 import blosum62

## GENERATED BY HUMAN

"""
This is the only piece of code I wrote for this implementation.
The rest was generated by pasting the assignment prompt into
chat.openai.com/chat, and asking it to complete it for me.
"""


def print_alignment(seq1, seq2):
    # grab constants for list manip
    length = len(seq1)
    beginning = 0
    end = 50

    # num base pairs iterated over for each strand
    char1 = 1
    char2 = 1

    # print 50 lines of each seq at a time
    while True:
        # create temp lists
        tmp1 = seq1[beginning : min(length, end)]
        tmp2 = seq2[beginning : min(length, end)]

        # compose lines
        line1 = ""
        line2 = ""
        line3 = ""

        for i in range(len(tmp1)):
            line1 += tmp1[i]
            line2 += tmp2[i]
            # check for exact matches
            if tmp1[i] == tmp2[i]:
                line3 += "*"
            else:
                line3 += " "
            # only add char if not a gap
            if tmp1[i] != "-":
                char1 += 1

            if tmp2[i] != "-":
                char2 += 1

        # add traversed chars after each sequence line
        line1 += f" |{char1}"
        line2 += f" |{char2}"
        print(line1)
        print(line2)
        print(line3)
        # increase list indexes
        beginning += 50
        end += 50
        if beginning > length:
            break


## END GENERATED BY HUMAN

## BEGIN GENERATED BY AI

import numpy as np


def global_alignment(seq1, seq2, substitution_matrix):
    # Initialize the scoring matrix with 0s
    scoring_matrix = np.zeros((len(seq1) + 1, len(seq2) + 1))

    # Iterate over the sequences and fill in the scoring matrix
    for i in range(1, len(seq1) + 1):
        for j in range(1, len(seq2) + 1):
            # Calculate the score for aligning the current pair of nucleotides/amino acids
            match = (
                scoring_matrix[i - 1][j - 1]
                + substitution_matrix[seq1[i - 1]][seq2[j - 1]]
            )
            delete = scoring_matrix[i - 1][j] - 1
            insert = scoring_matrix[i][j - 1] - 1

            # Update the scoring matrix with the maximum score for this position
            scoring_matrix[i][j] = max(match, delete, insert)

    # Trace back through the matrix to determine the optimal alignment
    alignment1 = ""
    alignment2 = ""
    i = len(seq1)
    j = len(seq2)
    score = scoring_matrix[i][j]
    while i > 0 and j > 0:
        current_score = scoring_matrix[i][j]
        diagonal_score = scoring_matrix[i - 1][j - 1]
        up_score = scoring_matrix[i][j - 1]
        left_score = scoring_matrix[i - 1][j]

        # Check where the current score came from and update the alignments accordingly
        if (
            current_score
            == diagonal_score + substitution_matrix[seq1[i - 1]][seq2[j - 1]]
        ):
            alignment1 = seq1[i - 1] + alignment1
            alignment2 = seq2[j - 1] + alignment2
            i -= 1
            j -= 1
        elif current_score == left_score - 1:
            alignment1 = seq1[i - 1] + alignment1
            alignment2 = "-" + alignment2
            i -= 1
        elif current_score == up_score - 1:
            alignment1 = "-" + alignment1
            alignment2 = seq2[j - 1] + alignment2
            j -= 1

    # Add remaining characters to the alignments
    while i > 0:
        alignment1 = seq1[i - 1] + alignment1
        alignment2 = "-" + alignment2
        i -= 1
    while j > 0:
        alignment1 = "-" + alignment1
        alignment2 = seq2[j - 1] + alignment2
        j -= 1

    # Print the alignments and the alignment score
    ### HUMAN TO RETURN THE VALUES FROM THE FUNCTION
    return alignment1, alignment2, score


# Define the substitution matrix to use for protein sequence alignments
substitution_matrix = {
    "A": {
        "A": 5,
        "C": -1,
        "D": -2,
        "E": -1,
        "F": -3,
        "G": 0,
        "H": -2,
        "I": -1,
        "K": -1,
        "L": -3,
        "M": -1,
        "N": -2,
        "P": 1,
        "Q": 0,
        "R": -2,
        "S": 1,
        "T": 0,
        "V": 0,
        "W": -3,
        "Y": -2,
    },
    "C": {
        "A": -1,
        "C": 9,
        "D": -3,
        "E": -4,
        "F": -2,
        "G": -3,
        "H": -3,
        "I": -1,
        "K": -3,
        "L": -1,
        "M": -1,
        "N": -3,
        "P": -3,
        "Q": -3,
        "R": -3,
        "S": -1,
        "T": -1,
        "V": -1,
        "W": -2,
        "Y": -2,
    },
    "D": {
        "A": -2,
        "C": -3,
        "D": 6,
        "E": 2,
        "F": -3,
        "G": -1,
        "H": -1,
        "I": -3,
        "K": -1,
        "L": -4,
        "M": -3,
        "N": 1,
        "P": -1,
        "Q": 0,
        "R": -2,
        "S": 0,
        "T": -1,
        "V": -3,
        "W": -4,
        "Y": -3,
    },
    "E": {
        "A": -1,
        "C": -4,
        "D": 2,
        "E": 5,
        "F": -3,
        "G": -2,
        "H": 0,
        "I": -3,
        "K": 1,
        "L": -3,
        "M": -2,
        "N": 0,
        "P": -1,
        "Q": 2,
        "R": -1,
        "S": 0,
        "T": -1,
        "V": -2,
        "W": -3,
        "Y": -2,
    },
    "F": {
        "A": -3,
        "C": -2,
        "D": -3,
        "E": -3,
        "F": 6,
        "G": -4,
        "H": -2,
        "I": 0,
        "K": -3,
        "L": 0,
        "M": 0,
        "N": -3,
        "P": -4,
        "Q": -3,
        "R": -3,
        "S": -2,
        "T": -2,
        "V": -1,
        "W": 1,
        "Y": 3,
    },
    "G": {
        "A": 0,
        "C": -3,
        "D": -1,
        "E": -2,
        "F": -4,
        "G": 6,
        "H": -2,
        "I": -4,
        "K": -2,
        "L": -4,
        "M": -3,
        "N": 0,
        "P": -2,
        "Q": -2,
        "R": -2,
        "S": 0,
        "T": -2,
        "V": -3,
        "W": -2,
        "Y": -3,
    },
    "H": {
        "A": -2,
        "C": -3,
        "D": -1,
        "E": 0,
        "F": -2,
        "G": -2,
        "H": 8,
        "I": -3,
        "K": -1,
        "L": -3,
        "M": -2,
        "N": 1,
        "P": -2,
        "Q": 0,
        "R": 0,
        "S": -1,
        "T": -2,
        "V": -3,
        "W": -2,
        "Y": 2,
    },
    "I": {
        "A": -1,
        "C": -1,
        "D": -3,
        "E": -3,
        "F": 0,
        "G": -4,
        "H": -3,
        "I": 4,
        "K": -3,
        "L": 2,
        "M": 1,
        "N": -3,
        "P": -3,
        "Q": -3,
        "R": -3,
        "S": -2,
        "T": -1,
        "V": 3,
        "W": -3,
        "Y": -1,
    },
    "K": {
        "A": -1,
        "C": -3,
        "D": -1,
        "E": 1,
        "F": -3,
        "G": -2,
        "H": -1,
        "I": -3,
        "K": 5,
        "L": -2,
        "M": -1,
        "N": 0,
        "P": -1,
        "Q": 1,
        "R": 2,
        "S": -1,
        "T": -1,
        "V": -2,
        "W": -3,
        "Y": -2,
    },
    "L": {
        "A": -3,
        "C": -1,
        "D": -4,
        "E": -3,
        "F": 0,
        "G": -4,
        "H": -3,
        "I": 2,
        "K": -2,
        "L": 4,
        "M": 2,
        "N": -3,
        "P": -3,
        "Q": -2,
        "R": -2,
        "S": -2,
        "T": -1,
        "V": 1,
        "W": -2,
        "Y": -1,
    },
    "M": {
        "A": -1,
        "C": -1,
        "D": -3,
        "E": -2,
        "F": 0,
        "G": -3,
        "H": -2,
        "I": 1,
        "K": -1,
        "L": 2,
        "M": 5,
        "N": -2,
        "P": -2,
        "Q": 0,
        "R": -1,
        "S": -1,
        "T": -1,
        "V": 1,
        "W": -1,
        "Y": -1,
    },
    "N": {
        "A": -2,
        "C": -3,
        "D": 1,
        "E": 0,
        "F": -3,
        "G": 0,
        "H": 1,
        "I": -3,
        "K": 0,
        "L": -3,
        "M": -2,
        "N": 6,
        "P": -2,
        "Q": 0,
        "R": 0,
        "S": 1,
        "T": 0,
        "V": -3,
        "W": -4,
        "Y": -2,
    },
    "P": {
        "A": 1,
        "C": -3,
        "D": -1,
        "E": -1,
        "F": -4,
        "G": -2,
        "H": -2,
        "I": -3,
        "K": -1,
        "L": -3,
        "M": -2,
        "N": -2,
        "P": 7,
        "Q": -1,
        "R": -2,
        "S": -1,
        "T": -1,
        "V": -2,
        "W": -4,
        "Y": -3,
    },
    "Q": {
        "A": 0,
        "C": -3,
        "D": 0,
        "E": 2,
        "F": -3,
        "G": -2,
        "H": 0,
        "I": -3,
        "K": 1,
        "L": -2,
        "M": 0,
        "N": 0,
        "P": -1,
        "Q": 5,
        "R": 1,
        "S": -1,
        "T": -1,
        "V": -2,
        "W": -2,
        "Y": -1,
    },
    "R": {
        "A": -2,
        "C": -3,
        "D": -2,
        "E": -1,
        "F": -3,
        "G": -2,
        "H": 0,
        "I": -3,
        "K": 2,
        "L": -2,
        "M": -1,
        "N": 0,
        "P": -2,
        "Q": 1,
        "R": 5,
        "S": -1,
        "T": -1,
        "V": -3,
        "W": -3,
        "Y": -2,
    },
    "S": {
        "A": 1,
        "C": -1,
        "D": 0,
        "E": 0,
        "F": -2,
        "G": 0,
        "H": -1,
        "I": -2,
        "K": -1,
        "L": -2,
        "M": -1,
        "N": 1,
        "P": -1,
        "Q": -1,
        "R": -1,
        "S": 4,
        "T": 1,
        "V": -2,
        "W": -3,
        "Y": -2,
    },
    "T": {
        "A": 0,
        "C": -1,
        "D": -1,
        "E": -1,
        "F": -2,
        "G": -2,
        "H": -2,
        "I": -1,
        "K": -1,
        "L": -1,
        "M": -1,
        "N": 0,
        "P": -1,
        "Q": -1,
        "R": -1,
        "S": 1,
        "T": 5,
        "V": 0,
        "W": -2,
        "Y": -2,
    },
    "V": {
        "A": 0,
        "C": -1,
        "D": -3,
        "E": -2,
        "F": -1,
        "G": -3,
        "H": -3,
        "I": 3,
        "K": -2,
        "L": 1,
        "M": 1,
        "N": -3,
        "P": -2,
        "Q": -2,
        "R": -3,
        "S": -2,
        "T": 0,
        "V": 4,
        "W": -3,
        "Y": -1,
    },
    "W": {
        "A": -3,
        "C": -2,
        "D": -4,
        "E": -3,
        "F": 1,
        "G": -2,
        "H": -2,
        "I": -3,
        "K": -3,
        "L": -2,
        "M": -1,
        "N": -4,
        "P": -4,
        "Q": -2,
        "R": -3,
        "S": -3,
        "T": -2,
        "V": -3,
        "W": 11,
        "Y": 2,
    },
    "Y": {
        "A": -2,
        "C": -2,
        "D": -3,
        "E": -2,
        "F": 3,
        "G": -3,
        "H": 2,
        "I": -1,
        "K": -2,
        "L": -1,
        "M": -1,
        "N": -2,
        "P": -3,
        "Q": -1,
        "R": -2,
        "S": -2,
        "T": -2,
        "V": -1,
        "W": 2,
        "Y": 7,
    },
}

# Define the sequences to align
seq1 = "MTIPHMKYAVSKTSENKVSNTVSPTQDKDAIRKQPDDIINNDEPSHKKIKVAQPDSLRETNTTDPLGHTKAALGEVASMELKPTNDMDPLAVSAASVVSMSNDVLKPETPKGPIIISKNPSNGIFYGPSFTKRESLNARMFLKYYGAHKFLDTYLPEDLNSLYIYYLIKLLGFEVKDQALIGTINSIVHINSQERVQDLGSAISVTNVEDPLAKKQTVRLIKDLQRAINKVLCTRLRLSNFFTIDHFIQKLHTARKILVLTGAGVSTSLGIPDFRSSEGFYSKIKHLGLDDPQDVFNYNIFMHDPSVFYNIANMVLPPEKIYSPLHSFIKMLQMKGKLLRNYTQNIDNLESYAGISTDKLVQCHGSFATATCVTCHWNLPGERIFNKIRNLELPLCPYCYKKRREYFPEGYNNKVGVAASQGSMSERPPYILNSYGVLKPDITFFGEALPNKFHKSIREDILECDLLICIGTSLKVAPVSEIVNMVPSHVPQVLINRDPVKHAEFDLSLLGYCDDIAAMVAQKCGWTIPHKKWNDLKNKNFKCQEKDKGVYVVTSDEHPKTL"
seq2 = "MKQKFVLPITPPSTAEKKPQTENRCNENLKPRRLLPQLKKSVRNRKPRLSYRPELNSVFDLDAYVDSTHLSKSQRHHMDRDAGFISYALNYSKRMVVVSGAGISVAAGIPDFRSSEGIFSTVNGGSGKDLFDYNRVYGDESMSLKFNQLMVSLFRLSKNCQPTKFHEMLNEFARDGRLLRLYTQNIDGLDTQLPHLSTNVPLAKPIPSTVQLHGSIKHMECNKCLNIKPFDPELFKCDDKFDSRTEIIPSCPQCEEYETVRKMAGLRSTGVGKLRPRVILYNEVHPEGDFIGEIANNDLKKRIDCLIIVGTSLKIPGVKNICRQFAAKVHANRGIVLYLNTSMPPKNVLDSLKFVDLVVLGDCQHVTSLL"

# Perform the global alignment
alignment1, alignment2, score = global_alignment(seq1, seq2, substitution_matrix)

# Print the resulting alignments
print(alignment1)
print(alignment2)
print("Score: " + str(score))

## END GENERATED BY AI

## BEGIN GENERATED BY HUMAN

print("")
print_alignment(alignment1, alignment2)

## END GENERATED BY HUMAN
